/*
    This component includes both an attribute search bar and the generated
    table of closest matching attributes. It differs from the AttributeSearchTool
    because this is for use when adding and Equipment Type, so it does not share
    all of its functionality.
 */

import React from "react";
import PropTypes from "prop-types";
require("../css/EquipmentTypeAttributeSearchToolStyle.css");

let dao = require("../dao.js");

export class EquipmentEquipmentTypeSearchTool extends React.Component {
    constructor() {
        super();
        this.state = {
            tableState: "asHidden",
            searchString: "",
            db_response: "",
            resultsTable: ""
        };
    }

    onHandleSearchChange(event) {
        this.setState({
            searchString: event.target.value
        });
    }

    searchButtonClicked(event) {
        var ref = this;

        dao.getEquipmentTypeAll(function(error, response) {
            if (error != null) {
                console.log(error);
            } else {
                var numEls = response.result.length;
				var equipmentTypesList = [];
				for (var i = 0; i < numEls; i++) {
					equipmentTypesList.push(response.result[i]);
				}

				var results = equipmentTypesList.map((function(equipmentType){
								return (
									<tr na={equipmentType.name} key={equipmentType.name} onClick={(event)=>ref.equipmentTypeClicked(event, equipmentType)}>
										<td>{equipmentType.name}</td>
										<td>{equipmentType.type}</td>
									</tr>);
							}).bind(this));

                ref.setState({
					db_response: response,
					resultsTable: results,
					tableState: "asVisible"
                })
            }
        });
		event.preventDefault();
    }

    equipmentTypeClicked(event, attribute) {
        this.props.handleAddEquipmentType(event, attribute);
        event.preventDefault();
    }

    render () {
        return (
            <div>
                <form onSubmit={(event) =>this.searchButtonClicked(event)}>
                    <div className="input-group" style={this.props.barStyle}>
                      <input id="search" type="search" className="form-control transparent-input" placeholder={this.props.placeholder} onChange={(event) => this.onHandleSearchChange(event)}/>
                        <span className="input-group-btn">
                          <button id="submit" className="btn btn-secondary" type="button" onClick={(event) =>this.searchButtonClicked(event)}>
                              <span className="glyphicon glyphicon-search"></span>
                          </button>
                        </span>
                    </div>
                </form>
                <div id={this.state.tableState} className="hiddenTableDiv">
                    <table className="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            {this.state.resultsTable}
                        </tbody>
                    </table>
                </div>
            </div>
        );
    }
}

EquipmentEquipmentTypeSearchTool.propTypes = {
    barStyle: PropTypes.object,
    placeholder: PropTypes.string,
    history: PropTypes.object,
    handleAddEquipmentType: PropTypes.func,
};
